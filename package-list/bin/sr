#!/usr/bin/env python3
"""
a
"""

# %%
import os
import subprocess
from pathlib import Path
from shutil import get_terminal_size
from typing import Literal

# %%
EXIT_STATUS = Literal[
    0,  # success
    1,  # failure
]


class Executables:
    @staticmethod
    def get_root_progs() -> list[Path]:
        return list((Path("/") / "Applications").glob("*.app"))

    @staticmethod
    def get_user_progs() -> list[Path]:
        return list((Path.home() / "Applications").glob("*.app"))

    def file_allowed(self, path: Path) -> bool:
        """Return True if the path is an executable regular file."""
        try:
            return path.is_file() and os.access(path, os.X_OK)
        except (FileNotFoundError, PermissionError):
            return False

    def get_executables_in_dir(self, directory: Path) -> list[Path]:
        """Get all executable files in a directory (non-recursive)."""
        try:
            return [p for p in directory.iterdir() if self.file_allowed(p)]
        except (FileNotFoundError, PermissionError):
            return []

    def get_path_executables(self) -> list[Path]:
        """
        Return a mapping of executable names to their full paths,
        respecting PATH precedence (first match wins).
        """
        path_dirs = [
            Path(x) for x in os.environ.get("PATH", "").split(":") if x
        ]
        seen: dict[str, Path] = {}
        for directory in path_dirs:
            for exe in self.get_executables_in_dir(directory):
                name = exe.name
                if name not in seen:
                    seen[name] = exe
        return list(seen.values())

    def __call__(self) -> list[Path]:
        return (
            self.get_path_executables()
            + self.get_root_progs()
            + self.get_user_progs()
        )


EXECUTABLES = Executables()()


def make_display_lines(entries: dict[str, Path]) -> dict[str, Path]:
    """
    Format entries like:
    git                                 /opt/homebrew/bin
    open                                /System/Applications
    """

    max_name_len = max(len(name) for name in entries)
    term_width = get_terminal_size().columns
    formatted = {}

    for name, path in entries.items():
        # Right-align path by computing padding
        padding = max_name_len + 4
        parent = str(path.parent)
        if padding + len(parent) >= term_width:
            # Truncate path if too long
            parent = "â€¦" + parent[-(term_width - padding - 1) :]
        line = f"{name.ljust(padding)}{parent}"
        formatted[line] = path

    return formatted


def launch_selector() -> EXIT_STATUS:
    options_raw: dict[str, Path] = {p.stem: p for p in EXECUTABLES}
    display_map = make_display_lines(options_raw)

    try:
        selected = subprocess.run(
            ["fzf", "--with-nth=1", "--ansi", "--prompt=Launch: "],
            input="\n".join(display_map.keys()),
            capture_output=True,
            text=True,
            check=True,
        ).stdout.strip()
    except subprocess.CalledProcessError:
        return 1

    if not selected:
        return 1

    selected_path = display_map[selected]

    if selected_path.suffix == ".app":
        subprocess.Popen(["open", selected_path])
    else:
        subprocess.Popen([str(selected_path)])
    return 0


# %%
__all__: list[str] = []
if __name__ == "__main__":
    launch_selector()
# %%
