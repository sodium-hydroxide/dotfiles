# Start with Debian as our base image - using slim version to reduce image size
FROM debian:bullseye-slim

# Install necessary dependencies
RUN apt-get update && apt-get install -y \
    wget \
    xvfb \
    x11vnc \
    fluxbox \
    dbus-x11 \
    novnc \
    websockify \
    ca-certificates \
    libgbm1 \
    libasound2

# # Add the FreeTube repository

WORKDIR /app/

RUN wget -qO freetube.deb https://github.com/FreeTubeApp/FreeTube/releases/download/v0.23.1-beta/freetube_0.23.1_arm64.deb

RUN apt-get update && \
    apt-get install -y -f ./freetube.deb && \
    rm /app/freetube.deb && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*



RUN mkdir -p /app/db

VOLUME /app/db

RUN useradd -m -s /bin/bash freetube
USER freetube

ENV DISPLAY=:1
RUN mkdir -p ~/.vnc && echo "fluxbox &" > ~/.vnc/xstartup && chmod +x ~/.vnc/xstartup

EXPOSE 8080 5900

# Start Xvfb, VNC, and noVNC, then launch FreeTube
CMD Xvfb :1 -screen 0 1280x720x24 & \
    x11vnc -display :1 -forever -nopw -rfbport 5900 & \
    websockify --web /usr/share/novnc 8080 localhost:5900 & \
    fluxbox & \
    sleep 2 && freetube --no-sandbox

# FROM debian:bookworm-slim AS vscode
# ENV DEBIAN_FRONTEND=noninteractive
# RUN apt-get update && apt-get install -y \
#     curl \
#     sudo \
#     git \
#     bash \
#     && apt-get clean \
#     && rm -rf /var/lib/apt/lists/*
# RUN useradd -m -s /bin/bash coder && echo "coder ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/coder
# USER coder
# RUN curl -fsSL https://code-server.dev/install.sh | sh
# RUN echo $PATH
# RUN exit 1

# # RUN code-server --install-extension
# RUN mkdir -p ~/.config/code-server/User \
#     && mkdir -p ~/.config/code-server/snippets
# RUN echo '{ \
#     "editor.fontSize": 14, \
#     "editor.tabSize": 4, \
#     "workbench.colorTheme": "Default Dark+", \
#     "terminal.integrated.shell.linux": "/bin/bash" \
# }' > ~/.config/code-server/User/settings.json && \
#     echo '[ \
#     { \
#         "key": "ctrl+shift+t", \
#         "command": "workbench.action.terminal.new" \
#     } \
# ]' > ~/.config/code-server/User/keybindings.json && \
#     echo '{ \
#     "Print Statement": { \
#         "prefix": "print", \
#         "body": ["print(\\"$1\\")"], \
#         "description": "Shortcut for print statement" \
#     } \
# }' > ~/.config/code-server/snippets/python.json

# FROM debian:bookworm-slim
# ENV DEBIAN_FRONTEND=noninteractive
# RUN useradd -m -s /bin/bash coder && \
#     apt-get update && apt-get install -y \
#     sudo \
#     git \
#     bash \
#     && apt-get clean && rm -rf /var/lib/apt/lists/* \
#     echo "coder ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/coder
# COPY --from=vscode /usr/lib/code-server/ /usr/lib/code-server
# COPY --from=vscode /home/coder/.config/code-server /home/coder/.config/code-server
# RUN chown -R coder:coder /home/coder
# USER coder
# EXPOSE 8888
# CMD ["/usr/lib/code-server/lib/vscode/bin/code-server", "--bind-addr", "0.0.0.0:8888", "--auth", "none", "--disable-telemetry"]









# LibreOffice (Headless Mode)
# Podmanfile: libreoffice.Dockerfile
FROM debian:latest
RUN apt-get update && apt-get install -y libreoffice
# CMD libreoffice --headless --accept="socket,host=0.0.0.0,port=8100;urp;"
CMD ["libreoffice", "--headless", "--accept=socket,host=0.0.0.0,port=8888;urp;"]


# Shell Script: libreoffice.sh
#!/bin/sh
IMAGE_NAME=libreoffice-container
PORT=8100
if ! podman image exists $IMAGE_NAME; then
  podman build -t $IMAGE_NAME -f libreoffice.Dockerfile
fi
podman run --rm -p $PORT:$PORT -v $(pwd):/workspace:z $IMAGE_NAME &
sleep 2
$BROWSER http://localhost:$PORT

# FreeTube (VNC-Based Access)
# Podmanfile: freetube.Dockerfile
FROM archlinux:latest
RUN pacman -Sy --noconfirm freetube x11vnc xvfb
CMD x11vnc -forever & Xvfb :99 -screen 0 1920x1080x24 & DISPLAY=:99 freetube

# Shell Script: freetube.sh
#!/bin/sh
IMAGE_NAME=freetube-container
PORT=5901
if ! podman image exists $IMAGE_NAME; then
  podman build -t $IMAGE_NAME -f freetube.Dockerfile
fi
podman run --rm -p $PORT:$PORT -v ~/.config/freetube:/data:z $IMAGE_NAME &
sleep 2
$BROWSER http://localhost:$PORT

# Zotero (Web API Enabled)
# Podmanfile: zotero.Dockerfile
FROM ubuntu:latest
RUN apt-get update && apt-get install -y zotero
CMD zotero --profile /data --headless

# Shell Script: zotero.sh
#!/bin/sh
IMAGE_NAME=zotero-container
PORT=23119
if ! podman image exists $IMAGE_NAME; then
  podman build -t $IMAGE_NAME -f zotero.Dockerfile
fi
podman run --rm -p $PORT:$PORT -v ~/.zotero:/data:z $IMAGE_NAME &
sleep 2
$BROWSER http://localhost:$PORT

# Calibre (Content Server)
# Podmanfile: calibre.Dockerfile
FROM ubuntu:latest
RUN apt-get update && apt-get install -y calibre
CMD calibre-server /library

# Shell Script: calibre.sh
#!/bin/sh
IMAGE_NAME=calibre-container
PORT=8080
if ! podman image exists $IMAGE_NAME; then
  podman build -t $IMAGE_NAME -f calibre.Dockerfile
fi
podman run --rm -p $PORT:$PORT -v ~/CalibreLibrary:/library:z $IMAGE_NAME &
sleep 2
$BROWSER http://localhost:$PORT
