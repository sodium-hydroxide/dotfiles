#!/usr/bin/env python3

# import argparse
import os
import subprocess
import sys
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, Final, List, NamedTuple, Optional


@dataclass
class NvimConfig:
    """Represents a Neovim configuration mode"""

    name: str
    lua_function: str
    description: str


MODES: Final[Dict[str, NvimConfig]] = {
    "plain": NvimConfig("plain", "", "Basic Neovim configuration"),
    "ide": NvimConfig("ide", ":ModeIDE", "General IDE setup"),
    "python": NvimConfig("python", ":ModePython", "Python development"),
    "haskell": NvimConfig("haskell", ":ModeHaskell", "Haskell development"),
    "rlang": NvimConfig("rlang", ":ModeR", "R development"),
    "clang": NvimConfig("clang", ":ModeC", "R development"),
}


class ProcessedArgs(NamedTuple):
    """Container for processed command line arguments"""

    nvim_args: List[str]
    filepath: Optional[str]
    mode: Optional[str]
    gui: bool
    show_help: bool


def print_help() -> None:
    command = "{command}"
    file = "{file}"
    """Print help message"""
    help_text = f"""\
Usage: {os.path.basename(sys.argv[0])} [options] [file]

Enhanced Neovim launcher that handles vi-style arguments

Options:
  -h, --help            Show this help message and exit
  --gui, -g             Open in Neovide instead of terminal Neovim
  --mode, -m MODE       IDE mode for the Neovim window
                        Available modes: {', '.join(MODES.keys())}

Neovim Options:
  +{command}            Execute {command} after loading the first file
  +                     Start at end of file
  -R, --readonly        Open file in readonly mode
  -m                    Modifications not saved
  -M                    Modifications not allowed
  -b                    Binary mode
  -l                    Lisp mode
  -A                    Arabic mode
  -Z                    Restricted mode
  -e, -E                Ex mode
  -es, -Es              Silent Ex mode
  -d, --diff            Diff mode
  -n, --noplugin        No plugins
  -p                    Open files in tabs
  -o                    Open files in horizontal splits
  -O                    Open files in vertical splits
  -c {command}          Execute {command} after loading the first file
  --cmd {command}       Execute {command} before loading any files
  -S {file}             Source {file} after loading the first file
  -i {file}             Use {file} for viminfo
  -u {file}             Use {file} as config file
  -v, --version         Print version information and exit

For detailed Neovim options, run: nvim --help
"""
    print(help_text)


def process_nvim_args(args: List[str]) -> ProcessedArgs:
    """Process Neovim-style arguments and return processed arguments"""
    nvim_args = []
    filepath = None
    mode = None
    gui = False
    show_help = False

    i = 0
    while i < len(args):
        arg = args[i]

        # Handle help first
        if arg in ["-h", "--help"]:
            show_help = True
            break
        # Handle our custom arguments
        elif arg in ["--gui", "-g"]:
            gui = True
        elif arg in ["--mode", "-m"]:
            if i + 1 < len(args) and not args[i + 1].startswith("-"):
                mode = args[i + 1]
                if mode not in MODES:
                    print(
                        f"Error: Invalid mode '{mode}'. Available modes: {', '.join(MODES.keys())}",
                        file=sys.stderr,
                    )
                    sys.exit(1)
                i += 1
            else:
                print("Error: --mode/-m requires a mode argument", file=sys.stderr)
                sys.exit(1)
        # Handle standard Neovim arguments
        elif arg.startswith("+"):
            nvim_args.extend(["-c", arg[1:] if len(arg) > 1 else ""])
        elif arg.startswith("-"):
            if arg in ["-v", "--version"]:
                nvim_args.append("--version")
            elif arg == "-R" or arg == "--readonly":
                nvim_args.append("--readonly")
            elif arg == "-Z":
                nvim_args.append("-Z")
            elif arg == "-m":
                nvim_args.append("-m")
            elif arg == "-M":
                nvim_args.append("-M")
            elif arg == "-b":
                nvim_args.append("-b")
            elif arg == "-l":
                nvim_args.append("-l")
            elif arg == "-A":
                nvim_args.append("-A")
            elif arg in ["-e", "-E"]:
                nvim_args.append(arg)
            elif arg == "-es" or arg == "-Es":
                nvim_args.append(arg)
            elif arg == "-d" or arg == "--diff":
                nvim_args.append("--diff")
            elif arg in ["-n", "--noplugin"]:
                nvim_args.append("--noplugin")
            elif arg in ["-p", "-o", "-O"]:
                nvim_args.append(arg)
            elif arg.startswith("--cmd"):
                if "=" in arg:
                    nvim_args.append(arg)
                else:
                    nvim_args.extend(["--cmd", args[i + 1]])
                    i += 1
            elif arg.startswith("-c"):
                if len(arg) > 2:
                    nvim_args.extend(["-c", arg[2:]])
                else:
                    nvim_args.extend(["-c", args[i + 1]])
                    i += 1
            elif arg.startswith("-S"):
                if len(arg) > 2:
                    nvim_args.extend(["-S", arg[2:]])
                else:
                    nvim_args.extend(["-S", args[i + 1]])
                    i += 1
            elif arg.startswith("-i"):
                if len(arg) > 2:
                    nvim_args.extend(["-i", arg[2:]])
                else:
                    nvim_args.extend(["-i", args[i + 1]])
                    i += 1
            elif arg.startswith("-u"):
                if len(arg) > 2:
                    nvim_args.extend(["-u", arg[2:]])
                else:
                    nvim_args.extend(["-u", args[i + 1]])
                    i += 1
            elif arg.startswith("--"):
                nvim_args.append(arg)
        else:
            filepath = arg
        i += 1

    return ProcessedArgs(nvim_args, filepath, mode, gui, show_help)


def get_directory(filepath: Optional[str]) -> Path:
    """Get the directory to open, using filepath or current directory"""
    if not filepath:
        return Path.cwd()

    path = Path(filepath)
    return path.parent if path.is_file() else path


def get_nvim_command(
    directory: Path,
    mode: str,
    gui: bool,
    nvim_args: List[str],
    filepath: Optional[str] = None,
) -> List[str]:
    """Build the complete Neovim command"""
    config = MODES[mode]

    # Base command
    cmd = ["neovide", "--"] if gui else ["nvim"]

    if filepath is None:
        cmd.extend(["--cmd", f"cd {directory}"])
    # Add any processed Neovim arguments
    cmd.extend(nvim_args)

    # Add initialization command if we have a command to call
    if config.lua_function:
        # Use -c to execute the command after Neovim is fully initialized
        cmd.extend(["-c", config.lua_function])

    # Add the filepath if specified, otherwise add the directory
    if filepath:
        cmd.append(filepath)

    return cmd


def main() -> int:
    # Process all arguments in a Neovim-compatible way
    processed_args = process_nvim_args(sys.argv[1:])

    # Show help if requested
    if processed_args.show_help:
        print_help()
        return 0

    # Set default mode if not specified
    mode = processed_args.mode or ("ide" if processed_args.gui else "plain")

    directory = get_directory(processed_args.filepath)
    cmd = get_nvim_command(
        directory,
        mode,
        processed_args.gui,
        processed_args.nvim_args,
        processed_args.filepath,
    )

    # Set environment variable for Neovim
    env = os.environ.copy()
    env["NVIM_MODE"] = mode

    try:
        result = subprocess.run(cmd, env=env)
        return result.returncode
    except KeyboardInterrupt:
        return 130
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        return 1


if __name__ == "__main__":
    sys.exit(main())

