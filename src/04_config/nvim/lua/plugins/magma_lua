return {
    {
        "dccsillag/magma-nvim",
        build = ":UpdateRemotePlugins",
        lazy = false,
        keys = {
            { "<leader>mr", "<cmd>MagmaEvaluateOperator<cr>", desc = "Magma Evaluate Operator" },
            { "<leader>ml", "<cmd>MagmaEvaluateLine<cr>", desc = "Magma Evaluate Line" },
            { "<leader>mv", "<cmd>MagmaEvaluateVisual<cr>", mode = "v", desc = "Magma Evaluate Visual" },
            { "<leader>mc", "<cmd>MagmaReevaluateCell<cr>", desc = "Magma Reevaluate Cell" },
            { "<leader>md", "<cmd>MagmaDelete<cr>", desc = "Magma Delete Output" },
            { "<leader>mo", "<cmd>MagmaShowOutput<cr>", desc = "Magma Show Output" },
            { "<leader>mi", "<cmd>MagmaInit<cr>", desc = "Magma Initialize" },
        },
        init = function()
            -- Magma configuration
            vim.g.magma_automatically_open_output = false
            vim.g.magma_show_mimetype_debug = false
            vim.g.magma_image_provider = "kitty"
            vim.g.magma_cell_highlight_group = "CursorLine"
            vim.g.magma_save_path = vim.fn.stdpath("data") .. "/magma"

            local magma_group = vim.api.nvim_create_augroup("Magma", { clear = true })

            vim.api.nvim_create_autocmd("BufLeave", {
                group = magma_group,
                pattern = "*",
                callback = function()
                    local status, _ = pcall(vim.fn.exists, ":MagmaDelete")
                    if status and vim.fn.exists(":MagmaDelete") > 0 then
                        pcall(vim.cmd, "MagmaDelete")
                    end
                end
            })

            vim.api.nvim_create_autocmd({"BufRead", "BufNewFile"}, {
                group = magma_group,
                pattern = "*.ipynb",
                callback = function()
                    vim.bo.filetype = "python"
                    vim.schedule(function()
                        local status, _ = pcall(vim.fn.exists, ":MagmaInit")
                        if status and vim.fn.exists(":MagmaInit") > 0 then
                            pcall(vim.cmd, "MagmaInit python3")
                        end
                    end)
                end
            })
        end,
        config = function()
            local status, wk = pcall(require, "which-key")
            if status then
                wk.register({
                    { "<leader>m", group = "Magma" },
                    { "<leader>mr", desc = "Evaluate Operator" },
                    { "<leader>ml", desc = "Evaluate Line" },
                    { "<leader>mv", desc = "Evaluate Visual" },
                    { "<leader>mc", desc = "Reevaluate Cell" },
                    { "<leader>md", desc = "Delete Output" },
                    { "<leader>mo", desc = "Show Output" },
                    { "<leader>mi", desc = "Initialize Kernel" },
                })
            end
        end,
    }
}



