#!/usr/bin/env python3
"""
Enhanced Neovim / Neovide launcher

Changes from original version
-----------------------------
* Removed all workspace "mode" logic
* Retained the ``-g`` / ``--gui`` option to launch **Neovide** instead of terminal
  Neovim.
* When ``-g`` is supplied the wrapper automatically executes the custom commands
  ``TermHorizontal`` and ``TreeToggle`` once the Neovim instance is up.  These
  are appended with ``-c`` so they run after the first buffer is loaded.

Usage
-----
    nvimw [options] [file]

Run ``nvimw --help`` for the full list of recognised options.
"""

from __future__ import annotations

import os
import subprocess
import sys
from pathlib import Path
from typing import List, NamedTuple, Optional


class ProcessedArgs(NamedTuple):
    """Container for processed command‑line arguments"""

    nvim_args: List[str]
    filepath: Optional[str]
    gui: bool
    show_help: bool


def print_help() -> None:
    """Display usage information"""

    cmd_placeholder = "{command}"
    file_placeholder = "{file}"

    help_text = f"""\
Usage: {os.path.basename(sys.argv[0])} [options] [file]

Lightweight Neovim / Neovide wrapper with vi‑style argument handling.

Options:
  -h, --help            Show this help message and exit
  --gui, -g             Launch Neovide; also runs :TermHorizontal and :TreeToggle

Neovim Options (forwarded):
  +{cmd_placeholder}            Execute {{cmd_placeholder}} after loading the first file
  +                     Start at end of file
  -R, --readonly        Open file in readonly mode
  -m                    Modifications not saved
  -M                    Modifications not allowed
  -b                    Binary mode
  -l                    Lisp mode
  -A                    Arabic mode
  -Z                    Restricted mode
  -e, -E                Ex mode
  -es, -Es              Silent Ex mode
  -d, --diff            Diff mode
  -n, --noplugin        No plugins
  -p                    Open files in tabs
  -o                    Open files in horizontal splits
  -O                    Open files in vertical splits
  -c {cmd_placeholder}          Execute {{cmd_placeholder}} after loading the first file
  --cmd {cmd_placeholder}       Execute {{cmd_placeholder}} before loading any files
  -S {file_placeholder}         Source {{file_placeholder}} after loading the first file
  -i {file_placeholder}         Use {{file_placeholder}} for viminfo
  -u {file_placeholder}         Use {{file_placeholder}} as config file
  -v, --version         Print version information and exit

For the full list of Neovim flags run: nvim --help
"""
    print(help_text)


def process_nvim_args(args: List[str]) -> ProcessedArgs:
    """Parse wrapper‑specific and Neovim‑style arguments"""

    nvim_args: List[str] = []
    filepath: Optional[str] = None
    gui = False
    show_help = False

    i = 0
    while i < len(args):
        arg = args[i]

        # Wrapper‑specific flags ------------------------------------------------
        if arg in {"-h", "--help"}:
            show_help = True
            break
        elif arg in {"--gui", "-g"}:
            gui = True

        # Vi‑style +{cmd} shorthand --------------------------------------------
        elif arg.startswith("+"):
            nvim_args.extend(["-c", arg[1:] if len(arg) > 1 else ""])

        # Standard single‑ and double‑dash Neovim flags -------------------------
        elif arg.startswith("-"):
            if arg in {
                "-v",
                "--version",
                "-R",
                "--readonly",
                "-Z",
                "-m",
                "-M",
                "-b",
                "-l",
                "-A",
                "-e",
                "-E",
                "-es",
                "-Es",
                "-d",
                "--diff",
                "-n",
                "--noplugin",
                "-p",
                "-o",
                "-O",
            }:
                nvim_args.append(arg)
            elif arg.startswith("--cmd"):
                if "=" in arg:
                    nvim_args.append(arg)
                else:
                    nvim_args.extend(["--cmd", args[i + 1]])
                    i += 1
            elif arg.startswith("-c"):
                if len(arg) > 2:
                    nvim_args.extend(["-c", arg[2:]])
                else:
                    nvim_args.extend(["-c", args[i + 1]])
                    i += 1
            elif arg.startswith("-S"):
                if len(arg) > 2:
                    nvim_args.extend(["-S", arg[2:]])
                else:
                    nvim_args.extend(["-S", args[i + 1]])
                    i += 1
            elif arg.startswith("-i"):
                if len(arg) > 2:
                    nvim_args.extend(["-i", arg[2:]])
                else:
                    nvim_args.extend(["-i", args[i + 1]])
                    i += 1
            elif arg.startswith("-u"):
                if len(arg) > 2:
                    nvim_args.extend(["-u", arg[2:]])
                else:
                    nvim_args.extend(["-u", args[i + 1]])
                    i += 1
            else:
                # Unrecognised flag – forward as‑is
                nvim_args.append(arg)

        # Positional argument assumed to be a file or directory -----------------
        else:
            filepath = arg

        i += 1

    return ProcessedArgs(
        nvim_args=nvim_args, filepath=filepath, gui=gui, show_help=show_help
    )


def get_directory(filepath: Optional[str]) -> Path:
    """Return directory to open, defaulting to CWD"""

    if filepath is None:
        return Path.cwd()

    p = Path(filepath)
    return p.parent if p.is_file() else p


def build_nvim_command(directory: Path, args: ProcessedArgs) -> List[str]:
    """Compose the final ``nvim`` / ``neovide`` command list"""

    # Base executable ----------------------------------------------------------
    cmd: List[str] = ["neovide", "--"] if args.gui else ["nvim"]

    # Ensure we start in the desired directory when *no* concrete path was given
    if args.filepath is None:
        cmd.extend(["--cmd", f"cd {directory}"])

    # Forward any flags parsed earlier ----------------------------------------
    cmd.extend(args.nvim_args)

    # GUI‑specific post‑load commands -----------------------------------------
    if args.gui:
        cmd.extend(["-c", "TermHorizontal", "-c", "TreeToggle"])

    # Final positional (file or directory) -------------------------------------
    if args.filepath is not None:
        cmd.append(args.filepath)

    return cmd


def main() -> int:
    parsed = process_nvim_args(sys.argv[1:])

    if parsed.show_help:
        print_help()
        return 0

    directory = get_directory(parsed.filepath)
    cmd = build_nvim_command(directory, parsed)

    try:
        return subprocess.run(
            cmd, check=False
        ).returncode  # propagate exit‑code
    except KeyboardInterrupt:
        return 130  # standard Ctrl‑C exit status
    except Exception as exc:  # pylint: disable=broad-except
        print(f"Error: {exc}", file=sys.stderr)
        return 1


if __name__ == "__main__":
    sys.exit(main())
