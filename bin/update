#!/usr/bin/env sh
# POSIX‑sh version of your update script
set -e

### Paths & filenames ###
DOTFILES_DIR="$HOME/dotfiles"
PACKAGELISTS="$HOME/.config/brewfile"

SYSTEMPYTHON="/opt/homebrew/bin/python3"
GLOBAL_VENV="$HOME/.local/.venv"
PYTHON="$GLOBAL_VENV/bin/python"

PYPROJECT="$PACKAGELISTS/pyproject.toml"
PYTOOLS="$PACKAGELISTS/tool-list.txt"
BREWFILE="$PACKAGELISTS/Brewfile"

### Helpers ###
error() {
    printf '%s\n' "Error: $*" >&2
    exit 1
}

check_cmd() {
    # $1 = command name, $2 = install hint
    if ! command -v "$1" >/dev/null 2>&1; then
        error "'$1' not found; please install it. $2"
    fi
}

usage() {
    cat <<-EOF
Usage: update [options]

Update global dotfiles, Homebrew packages, and Python tools.

Options:
  -c, --clean    Remove existing dotfile symlinks before applying
  -h, --help     Show this help and exit
EOF
}

### 1) Dotfiles via GNU Stow ###
dotfiles_apply() {
    check_cmd stow "e.g. 'brew install stow'"
    [ -d "$DOTFILES_DIR" ] || error "Dotfiles dir '$DOTFILES_DIR' not found"
    find "$DOTFILES_DIR" -name .DS_Store -exec rm -f {} +
    printf '→ Applying dotfiles via stow…\n'
    stow --no-folding -d "$DOTFILES_DIR" -t ~ .
}

dotfiles_remove() {
    check_cmd stow "e.g. 'brew install stow'"
    [ -d "$DOTFILES_DIR" ] || error "Dotfiles dir '$DOTFILES_DIR' not found"
    printf '→ Removing dotfile symlinks…\n'
    stow --no-folding -D -d "$DOTFILES_DIR" -t ~ .
}

### 2) Homebrew ###
brew_update() {
    check_cmd brew "install Homebrew from https://brew.sh/"
    printf '→ Updating Homebrew…\n'
    brew update
    brew upgrade
    brew bundle --file="$BREWFILE" --cleanup --force
    brew cleanup
}

### 3) Python / uv ###
pip_update() {
    check_cmd uv "install uv via pip, pipx, or your venv"

    # 1) Ensure the global venv exists
    if [ ! -x "$PYTHON" ]; then
        printf '→ Creating global venv at %s…\n' "$GLOBAL_VENV"
        uv venv --python "$SYSTEMPYTHON" "$GLOBAL_VENV"
    fi

    # 2) Bootstrap and upgrade pip
    "$PYTHON" -m ensurepip --upgrade
    "$PYTHON" -m pip install --upgrade pip

    # 3) Sync library dependencies into the venv
    if [ -f "$PYPROJECT" ]; then
        printf '→ Syncing libraries from %s into venv…\n' "$PYPROJECT"
        uv pip compile "$PYPROJECT" | uv pip sync --python "$PYTHON" -
    else
        printf '→ No pyproject.toml found; skipping library sync.\n'
    fi

    # 4) Manage CLI tools
    if [ -n "${PYTOOLS:-}" ] && [ -f "$PYTOOLS" ]; then
        printf '→ Managing CLI tools from %s…\n' "$PYTOOLS"

        # Desired tools (ignore blanks/comments)
        desired=$(grep -Ev '^\s*($|#)' "$PYTOOLS")

        # Currently installed tools
        installed=$(uv tool list 2>/dev/null |
            grep -Ev '^\s*-' |
            awk '{print $1}')

        # Install missing tools
        for tool in $desired; do
            printf '  → Ensuring %s is installed…\n' "$tool"
            echo "$installed" | grep -x "$tool" >/dev/null 2>&1 ||
                uv tool install "$tool"
        done

        # Uninstall extras
        for tool in $installed; do
            echo "$desired" | grep -x "$tool" >/dev/null 2>&1 ||
                uv tool uninstall "$tool"
        done
    else
        printf '→ No tool‑list file at %s; skipping CLI tool management.\n' "$PYTOOLS"
    fi
}

### Main ###
main() {
    clean_dotfiles=0

    # Parse options
    while [ $# -gt 0 ]; do
        case "$1" in
        -c | --clean)
            clean_dotfiles=1
            shift
            ;;
        -h | --help)
            usage
            exit 0
            ;;
        --)
            shift
            break
            ;;
        -*)
            error "Unknown option: $1"
            ;;
        *)
            break
            ;;
        esac
    done

    [ "$clean_dotfiles" -eq 1 ] && dotfiles_remove

    dotfiles_apply
    brew_update
    pip_update

    printf '✅ All done.\n'
}

main "$@"
